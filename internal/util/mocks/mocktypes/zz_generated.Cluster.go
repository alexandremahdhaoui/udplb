// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * Copyright 2025 Alexandre Mahdhaoui
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mocktypes

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCluster creates a new instance of MockCluster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCluster[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCluster[T] {
	mock := &MockCluster[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCluster is an autogenerated mock type for the Cluster type
type MockCluster[T any] struct {
	mock.Mock
}

type MockCluster_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockCluster[T]) EXPECT() *MockCluster_Expecter[T] {
	return &MockCluster_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCluster_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCluster_Close_Call[T any] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockCluster_Expecter[T]) Close() *MockCluster_Close_Call[T] {
	return &MockCluster_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *MockCluster_Close_Call[T]) Run(run func()) *MockCluster_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_Close_Call[T]) Return(err error) *MockCluster_Close_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCluster_Close_Call[T]) RunAndReturn(run func() error) *MockCluster_Close_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockCluster_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockCluster_Done_Call[T any] struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockCluster_Expecter[T]) Done() *MockCluster_Done_Call[T] {
	return &MockCluster_Done_Call[T]{Call: _e.mock.On("Done")}
}

func (_c *MockCluster_Done_Call[T]) Run(run func()) *MockCluster_Done_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_Done_Call[T]) Return(valCh <-chan struct{}) *MockCluster_Done_Call[T] {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockCluster_Done_Call[T]) RunAndReturn(run func() <-chan struct{}) *MockCluster_Done_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) Join() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCluster_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockCluster_Join_Call[T any] struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
func (_e *MockCluster_Expecter[T]) Join() *MockCluster_Join_Call[T] {
	return &MockCluster_Join_Call[T]{Call: _e.mock.On("Join")}
}

func (_c *MockCluster_Join_Call[T]) Run(run func()) *MockCluster_Join_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_Join_Call[T]) Return(err error) *MockCluster_Join_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCluster_Join_Call[T]) RunAndReturn(run func() error) *MockCluster_Join_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Leave provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) Leave() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Leave")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCluster_Leave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leave'
type MockCluster_Leave_Call[T any] struct {
	*mock.Call
}

// Leave is a helper method to define mock.On call
func (_e *MockCluster_Expecter[T]) Leave() *MockCluster_Leave_Call[T] {
	return &MockCluster_Leave_Call[T]{Call: _e.mock.On("Leave")}
}

func (_c *MockCluster_Leave_Call[T]) Run(run func()) *MockCluster_Leave_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_Leave_Call[T]) Return(err error) *MockCluster_Leave_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCluster_Leave_Call[T]) RunAndReturn(run func() error) *MockCluster_Leave_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) ListNodes() []uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() []uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	return r0
}

// MockCluster_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockCluster_ListNodes_Call[T any] struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
func (_e *MockCluster_Expecter[T]) ListNodes() *MockCluster_ListNodes_Call[T] {
	return &MockCluster_ListNodes_Call[T]{Call: _e.mock.On("ListNodes")}
}

func (_c *MockCluster_ListNodes_Call[T]) Run(run func()) *MockCluster_ListNodes_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_ListNodes_Call[T]) Return(uUIDs []uuid.UUID) *MockCluster_ListNodes_Call[T] {
	_c.Call.Return(uUIDs)
	return _c
}

func (_c *MockCluster_ListNodes_Call[T]) RunAndReturn(run func() []uuid.UUID) *MockCluster_ListNodes_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) Recv() (<-chan T, func()) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 <-chan T
	var r1 func()
	if returnFunc, ok := ret.Get(0).(func() (<-chan T, func())); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() <-chan T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() func()); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}
	return r0, r1
}

// MockCluster_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type MockCluster_Recv_Call[T any] struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *MockCluster_Expecter[T]) Recv() *MockCluster_Recv_Call[T] {
	return &MockCluster_Recv_Call[T]{Call: _e.mock.On("Recv")}
}

func (_c *MockCluster_Recv_Call[T]) Run(run func()) *MockCluster_Recv_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_Recv_Call[T]) Return(vCh <-chan T, fn func()) *MockCluster_Recv_Call[T] {
	_c.Call.Return(vCh, fn)
	return _c
}

func (_c *MockCluster_Recv_Call[T]) RunAndReturn(run func() (<-chan T, func())) *MockCluster_Recv_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCluster_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCluster_Run_Call[T any] struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCluster_Expecter[T]) Run(ctx interface{}) *MockCluster_Run_Call[T] {
	return &MockCluster_Run_Call[T]{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockCluster_Run_Call[T]) Run(run func(ctx context.Context)) *MockCluster_Run_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCluster_Run_Call[T]) Return(err error) *MockCluster_Run_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCluster_Run_Call[T]) RunAndReturn(run func(ctx context.Context) error) *MockCluster_Run_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockCluster
func (_mock *MockCluster[T]) Send(ch <-chan T) error {
	ret := _mock.Called(ch)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(<-chan T) error); ok {
		r0 = returnFunc(ch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCluster_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockCluster_Send_Call[T any] struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ch <-chan T
func (_e *MockCluster_Expecter[T]) Send(ch interface{}) *MockCluster_Send_Call[T] {
	return &MockCluster_Send_Call[T]{Call: _e.mock.On("Send", ch)}
}

func (_c *MockCluster_Send_Call[T]) Run(run func(ch <-chan T)) *MockCluster_Send_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 <-chan T
		if args[0] != nil {
			arg0 = args[0].(<-chan T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCluster_Send_Call[T]) Return(err error) *MockCluster_Send_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCluster_Send_Call[T]) RunAndReturn(run func(ch <-chan T) error) *MockCluster_Send_Call[T] {
	_c.Call.Return(run)
	return _c
}
