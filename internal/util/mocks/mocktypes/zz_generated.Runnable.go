// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * Copyright 2025 Alexandre Mahdhaoui
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mocktypes

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRunnable creates a new instance of MockRunnable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunnable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunnable {
	mock := &MockRunnable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRunnable is an autogenerated mock type for the Runnable type
type MockRunnable struct {
	mock.Mock
}

type MockRunnable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunnable) EXPECT() *MockRunnable_Expecter {
	return &MockRunnable_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockRunnable
func (_mock *MockRunnable) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRunnable_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRunnable_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRunnable_Expecter) Close() *MockRunnable_Close_Call {
	return &MockRunnable_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRunnable_Close_Call) Run(run func()) *MockRunnable_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunnable_Close_Call) Return(err error) *MockRunnable_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRunnable_Close_Call) RunAndReturn(run func() error) *MockRunnable_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockRunnable
func (_mock *MockRunnable) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockRunnable_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockRunnable_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockRunnable_Expecter) Done() *MockRunnable_Done_Call {
	return &MockRunnable_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockRunnable_Done_Call) Run(run func()) *MockRunnable_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunnable_Done_Call) Return(valCh <-chan struct{}) *MockRunnable_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockRunnable_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockRunnable_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockRunnable
func (_mock *MockRunnable) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRunnable_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRunnable_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRunnable_Expecter) Run(ctx interface{}) *MockRunnable_Run_Call {
	return &MockRunnable_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockRunnable_Run_Call) Run(run func(ctx context.Context)) *MockRunnable_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRunnable_Run_Call) Return(err error) *MockRunnable_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRunnable_Run_Call) RunAndReturn(run func(ctx context.Context) error) *MockRunnable_Run_Call {
	_c.Call.Return(run)
	return _c
}
