// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * Copyright 2025 Alexandre Mahdhaoui
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mocktypes

import (
	"github.com/alexandremahdhaoui/udplb/internal/types"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWALMux creates a new instance of MockWALMux. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWALMux(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWALMux {
	mock := &MockWALMux{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWALMux is an autogenerated mock type for the WALMux type
type MockWALMux struct {
	mock.Mock
}

type MockWALMux_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWALMux) EXPECT() *MockWALMux_Expecter {
	return &MockWALMux_Expecter{mock: &_m.Mock}
}

// Register provides a mock function for the type MockWALMux
func (_mock *MockWALMux) Register(walId uuid.UUID, v any) (types.Watcher[any], error) {
	ret := _mock.Called(walId, v)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 types.Watcher[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, any) (types.Watcher[any], error)); ok {
		return returnFunc(walId, v)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, any) types.Watcher[any]); ok {
		r0 = returnFunc(walId, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Watcher[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, any) error); ok {
		r1 = returnFunc(walId, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWALMux_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockWALMux_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - walId uuid.UUID
//   - v any
func (_e *MockWALMux_Expecter) Register(walId interface{}, v interface{}) *MockWALMux_Register_Call {
	return &MockWALMux_Register_Call{Call: _e.mock.On("Register", walId, v)}
}

func (_c *MockWALMux_Register_Call) Run(run func(walId uuid.UUID, v any)) *MockWALMux_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWALMux_Register_Call) Return(watcher types.Watcher[any], err error) *MockWALMux_Register_Call {
	_c.Call.Return(watcher, err)
	return _c
}

func (_c *MockWALMux_Register_Call) RunAndReturn(run func(walId uuid.UUID, v any) (types.Watcher[any], error)) *MockWALMux_Register_Call {
	_c.Call.Return(run)
	return _c
}
