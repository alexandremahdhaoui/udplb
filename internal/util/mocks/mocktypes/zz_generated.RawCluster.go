// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package types

import (
	"context"

	"github.com/alexandremahdhaoui/udplb/internal/types"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRawCluster creates a new instance of MockRawCluster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRawCluster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRawCluster {
	mock := &MockRawCluster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRawCluster is an autogenerated mock type for the RawCluster type
type MockRawCluster struct {
	mock.Mock
}

type MockRawCluster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRawCluster) EXPECT() *MockRawCluster_Expecter {
	return &MockRawCluster_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRawCluster_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRawCluster_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRawCluster_Expecter) Close() *MockRawCluster_Close_Call {
	return &MockRawCluster_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRawCluster_Close_Call) Run(run func()) *MockRawCluster_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawCluster_Close_Call) Return(err error) *MockRawCluster_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRawCluster_Close_Call) RunAndReturn(run func() error) *MockRawCluster_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockRawCluster_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockRawCluster_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockRawCluster_Expecter) Done() *MockRawCluster_Done_Call {
	return &MockRawCluster_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockRawCluster_Done_Call) Run(run func()) *MockRawCluster_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawCluster_Done_Call) Return(valCh <-chan struct{}) *MockRawCluster_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockRawCluster_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockRawCluster_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) Join() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRawCluster_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockRawCluster_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
func (_e *MockRawCluster_Expecter) Join() *MockRawCluster_Join_Call {
	return &MockRawCluster_Join_Call{Call: _e.mock.On("Join")}
}

func (_c *MockRawCluster_Join_Call) Run(run func()) *MockRawCluster_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawCluster_Join_Call) Return(err error) *MockRawCluster_Join_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRawCluster_Join_Call) RunAndReturn(run func() error) *MockRawCluster_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Leave provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) Leave() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Leave")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRawCluster_Leave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leave'
type MockRawCluster_Leave_Call struct {
	*mock.Call
}

// Leave is a helper method to define mock.On call
func (_e *MockRawCluster_Expecter) Leave() *MockRawCluster_Leave_Call {
	return &MockRawCluster_Leave_Call{Call: _e.mock.On("Leave")}
}

func (_c *MockRawCluster_Leave_Call) Run(run func()) *MockRawCluster_Leave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawCluster_Leave_Call) Return(err error) *MockRawCluster_Leave_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRawCluster_Leave_Call) RunAndReturn(run func() error) *MockRawCluster_Leave_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) ListNodes() []uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() []uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	return r0
}

// MockRawCluster_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockRawCluster_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
func (_e *MockRawCluster_Expecter) ListNodes() *MockRawCluster_ListNodes_Call {
	return &MockRawCluster_ListNodes_Call{Call: _e.mock.On("ListNodes")}
}

func (_c *MockRawCluster_ListNodes_Call) Run(run func()) *MockRawCluster_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawCluster_ListNodes_Call) Return(uUIDs []uuid.UUID) *MockRawCluster_ListNodes_Call {
	_c.Call.Return(uUIDs)
	return _c
}

func (_c *MockRawCluster_ListNodes_Call) RunAndReturn(run func() []uuid.UUID) *MockRawCluster_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) Recv() (<-chan types.RawData, func()) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 <-chan types.RawData
	var r1 func()
	if returnFunc, ok := ret.Get(0).(func() (<-chan types.RawData, func())); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() <-chan types.RawData); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan types.RawData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() func()); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}
	return r0, r1
}

// MockRawCluster_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type MockRawCluster_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *MockRawCluster_Expecter) Recv() *MockRawCluster_Recv_Call {
	return &MockRawCluster_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *MockRawCluster_Recv_Call) Run(run func()) *MockRawCluster_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawCluster_Recv_Call) Return(vCh <-chan types.RawData, fn func()) *MockRawCluster_Recv_Call {
	_c.Call.Return(vCh, fn)
	return _c
}

func (_c *MockRawCluster_Recv_Call) RunAndReturn(run func() (<-chan types.RawData, func())) *MockRawCluster_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRawCluster_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRawCluster_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRawCluster_Expecter) Run(ctx interface{}) *MockRawCluster_Run_Call {
	return &MockRawCluster_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockRawCluster_Run_Call) Run(run func(ctx context.Context)) *MockRawCluster_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRawCluster_Run_Call) Return(err error) *MockRawCluster_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRawCluster_Run_Call) RunAndReturn(run func(ctx context.Context) error) *MockRawCluster_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockRawCluster
func (_mock *MockRawCluster) Send(ch <-chan types.RawData) error {
	ret := _mock.Called(ch)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(<-chan types.RawData) error); ok {
		r0 = returnFunc(ch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRawCluster_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockRawCluster_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ch <-chan types.RawData
func (_e *MockRawCluster_Expecter) Send(ch interface{}) *MockRawCluster_Send_Call {
	return &MockRawCluster_Send_Call{Call: _e.mock.On("Send", ch)}
}

func (_c *MockRawCluster_Send_Call) Run(run func(ch <-chan types.RawData)) *MockRawCluster_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 <-chan types.RawData
		if args[0] != nil {
			arg0 = args[0].(<-chan types.RawData)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRawCluster_Send_Call) Return(err error) *MockRawCluster_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRawCluster_Send_Call) RunAndReturn(run func(ch <-chan types.RawData) error) *MockRawCluster_Send_Call {
	_c.Call.Return(run)
	return _c
}
