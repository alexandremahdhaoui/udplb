// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package types

import (
	"context"

	"github.com/alexandremahdhaoui/udplb/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWAL creates a new instance of MockWAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWAL[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWAL[T] {
	mock := &MockWAL[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWAL is an autogenerated mock type for the WAL type
type MockWAL[T any] struct {
	mock.Mock
}

type MockWAL_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockWAL[T]) EXPECT() *MockWAL_Expecter[T] {
	return &MockWAL_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function for the type MockWAL
func (_mock *MockWAL[T]) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWAL_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWAL_Close_Call[T any] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWAL_Expecter[T]) Close() *MockWAL_Close_Call[T] {
	return &MockWAL_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *MockWAL_Close_Call[T]) Run(run func()) *MockWAL_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWAL_Close_Call[T]) Return(err error) *MockWAL_Close_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWAL_Close_Call[T]) RunAndReturn(run func() error) *MockWAL_Close_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockWAL
func (_mock *MockWAL[T]) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockWAL_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockWAL_Done_Call[T any] struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockWAL_Expecter[T]) Done() *MockWAL_Done_Call[T] {
	return &MockWAL_Done_Call[T]{Call: _e.mock.On("Done")}
}

func (_c *MockWAL_Done_Call[T]) Run(run func()) *MockWAL_Done_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWAL_Done_Call[T]) Return(valCh <-chan struct{}) *MockWAL_Done_Call[T] {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockWAL_Done_Call[T]) RunAndReturn(run func() <-chan struct{}) *MockWAL_Done_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Propose provides a mock function for the type MockWAL
func (_mock *MockWAL[T]) Propose(entry types.WALEntry[T]) error {
	ret := _mock.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for Propose")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.WALEntry[T]) error); ok {
		r0 = returnFunc(entry)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWAL_Propose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Propose'
type MockWAL_Propose_Call[T any] struct {
	*mock.Call
}

// Propose is a helper method to define mock.On call
//   - entry types.WALEntry[T]
func (_e *MockWAL_Expecter[T]) Propose(entry interface{}) *MockWAL_Propose_Call[T] {
	return &MockWAL_Propose_Call[T]{Call: _e.mock.On("Propose", entry)}
}

func (_c *MockWAL_Propose_Call[T]) Run(run func(entry types.WALEntry[T])) *MockWAL_Propose_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.WALEntry[T]
		if args[0] != nil {
			arg0 = args[0].(types.WALEntry[T])
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWAL_Propose_Call[T]) Return(err error) *MockWAL_Propose_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWAL_Propose_Call[T]) RunAndReturn(run func(entry types.WALEntry[T]) error) *MockWAL_Propose_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockWAL
func (_mock *MockWAL[T]) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWAL_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockWAL_Run_Call[T any] struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWAL_Expecter[T]) Run(ctx interface{}) *MockWAL_Run_Call[T] {
	return &MockWAL_Run_Call[T]{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockWAL_Run_Call[T]) Run(run func(ctx context.Context)) *MockWAL_Run_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWAL_Run_Call[T]) Return(err error) *MockWAL_Run_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWAL_Run_Call[T]) RunAndReturn(run func(ctx context.Context) error) *MockWAL_Run_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockWAL
func (_mock *MockWAL[T]) Watch() (<-chan types.WalLinkedList[T], func()) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan types.WalLinkedList[T]
	var r1 func()
	if returnFunc, ok := ret.Get(0).(func() (<-chan types.WalLinkedList[T], func())); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() <-chan types.WalLinkedList[T]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan types.WalLinkedList[T])
		}
	}
	if returnFunc, ok := ret.Get(1).(func() func()); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}
	return r0, r1
}

// MockWAL_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockWAL_Watch_Call[T any] struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
func (_e *MockWAL_Expecter[T]) Watch() *MockWAL_Watch_Call[T] {
	return &MockWAL_Watch_Call[T]{Call: _e.mock.On("Watch")}
}

func (_c *MockWAL_Watch_Call[T]) Run(run func()) *MockWAL_Watch_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWAL_Watch_Call[T]) Return(walLinkedListCh <-chan types.WalLinkedList[T], fn func()) *MockWAL_Watch_Call[T] {
	_c.Call.Return(walLinkedListCh, fn)
	return _c
}

func (_c *MockWAL_Watch_Call[T]) RunAndReturn(run func() (<-chan types.WalLinkedList[T], func())) *MockWAL_Watch_Call[T] {
	_c.Call.Return(run)
	return _c
}
