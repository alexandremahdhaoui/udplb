// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package types

import (
	"github.com/alexandremahdhaoui/udplb/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStateMachine creates a new instance of MockStateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateMachine[T any, U any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateMachine[T, U] {
	mock := &MockStateMachine[T, U]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStateMachine is an autogenerated mock type for the StateMachine type
type MockStateMachine[T any, U any] struct {
	mock.Mock
}

type MockStateMachine_Expecter[T any, U any] struct {
	mock *mock.Mock
}

func (_m *MockStateMachine[T, U]) EXPECT() *MockStateMachine_Expecter[T, U] {
	return &MockStateMachine_Expecter[T, U]{mock: &_m.Mock}
}

// Decode provides a mock function for the type MockStateMachine
func (_mock *MockStateMachine[T, U]) Decode(buf []byte) error {
	ret := _mock.Called(buf)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = returnFunc(buf)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateMachine_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockStateMachine_Decode_Call[T any, U any] struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - buf []byte
func (_e *MockStateMachine_Expecter[T, U]) Decode(buf interface{}) *MockStateMachine_Decode_Call[T, U] {
	return &MockStateMachine_Decode_Call[T, U]{Call: _e.mock.On("Decode", buf)}
}

func (_c *MockStateMachine_Decode_Call[T, U]) Run(run func(buf []byte)) *MockStateMachine_Decode_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStateMachine_Decode_Call[T, U]) Return(err error) *MockStateMachine_Decode_Call[T, U] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateMachine_Decode_Call[T, U]) RunAndReturn(run func(buf []byte) error) *MockStateMachine_Decode_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// DeepCopy provides a mock function for the type MockStateMachine
func (_mock *MockStateMachine[T, U]) DeepCopy() types.StateMachine[T, U] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeepCopy")
	}

	var r0 types.StateMachine[T, U]
	if returnFunc, ok := ret.Get(0).(func() types.StateMachine[T, U]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.StateMachine[T, U])
		}
	}
	return r0
}

// MockStateMachine_DeepCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeepCopy'
type MockStateMachine_DeepCopy_Call[T any, U any] struct {
	*mock.Call
}

// DeepCopy is a helper method to define mock.On call
func (_e *MockStateMachine_Expecter[T, U]) DeepCopy() *MockStateMachine_DeepCopy_Call[T, U] {
	return &MockStateMachine_DeepCopy_Call[T, U]{Call: _e.mock.On("DeepCopy")}
}

func (_c *MockStateMachine_DeepCopy_Call[T, U]) Run(run func()) *MockStateMachine_DeepCopy_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateMachine_DeepCopy_Call[T, U]) Return(stateMachine types.StateMachine[T, U]) *MockStateMachine_DeepCopy_Call[T, U] {
	_c.Call.Return(stateMachine)
	return _c
}

func (_c *MockStateMachine_DeepCopy_Call[T, U]) RunAndReturn(run func() types.StateMachine[T, U]) *MockStateMachine_DeepCopy_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function for the type MockStateMachine
func (_mock *MockStateMachine[T, U]) Encode() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateMachine_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockStateMachine_Encode_Call[T any, U any] struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
func (_e *MockStateMachine_Expecter[T, U]) Encode() *MockStateMachine_Encode_Call[T, U] {
	return &MockStateMachine_Encode_Call[T, U]{Call: _e.mock.On("Encode")}
}

func (_c *MockStateMachine_Encode_Call[T, U]) Run(run func()) *MockStateMachine_Encode_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateMachine_Encode_Call[T, U]) Return(bytes []byte, err error) *MockStateMachine_Encode_Call[T, U] {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockStateMachine_Encode_Call[T, U]) RunAndReturn(run func() ([]byte, error)) *MockStateMachine_Encode_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockStateMachine
func (_mock *MockStateMachine[T, U]) Execute(verb types.StateMachineCommand, obj T) error {
	ret := _mock.Called(verb, obj)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.StateMachineCommand, T) error); ok {
		r0 = returnFunc(verb, obj)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateMachine_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStateMachine_Execute_Call[T any, U any] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - verb types.StateMachineCommand
//   - obj T
func (_e *MockStateMachine_Expecter[T, U]) Execute(verb interface{}, obj interface{}) *MockStateMachine_Execute_Call[T, U] {
	return &MockStateMachine_Execute_Call[T, U]{Call: _e.mock.On("Execute", verb, obj)}
}

func (_c *MockStateMachine_Execute_Call[T, U]) Run(run func(verb types.StateMachineCommand, obj T)) *MockStateMachine_Execute_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.StateMachineCommand
		if args[0] != nil {
			arg0 = args[0].(types.StateMachineCommand)
		}
		var arg1 T
		if args[1] != nil {
			arg1 = args[1].(T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStateMachine_Execute_Call[T, U]) Return(err error) *MockStateMachine_Execute_Call[T, U] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateMachine_Execute_Call[T, U]) RunAndReturn(run func(verb types.StateMachineCommand, obj T) error) *MockStateMachine_Execute_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function for the type MockStateMachine
func (_mock *MockStateMachine[T, U]) State() U {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 U
	if returnFunc, ok := ret.Get(0).(func() U); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(U)
		}
	}
	return r0
}

// MockStateMachine_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockStateMachine_State_Call[T any, U any] struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *MockStateMachine_Expecter[T, U]) State() *MockStateMachine_State_Call[T, U] {
	return &MockStateMachine_State_Call[T, U]{Call: _e.mock.On("State")}
}

func (_c *MockStateMachine_State_Call[T, U]) Run(run func()) *MockStateMachine_State_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateMachine_State_Call[T, U]) Return(v U) *MockStateMachine_State_Call[T, U] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockStateMachine_State_Call[T, U]) RunAndReturn(run func() U) *MockStateMachine_State_Call[T, U] {
	_c.Call.Return(run)
	return _c
}
