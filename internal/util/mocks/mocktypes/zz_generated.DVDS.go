// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * Copyright 2025 Alexandre Mahdhaoui
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mocktypes

import (
	"context"

	"github.com/alexandremahdhaoui/udplb/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDVDS creates a new instance of MockDVDS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDVDS[T any, U any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDVDS[T, U] {
	mock := &MockDVDS[T, U]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDVDS is an autogenerated mock type for the DVDS type
type MockDVDS[T any, U any] struct {
	mock.Mock
}

type MockDVDS_Expecter[T any, U any] struct {
	mock *mock.Mock
}

func (_m *MockDVDS[T, U]) EXPECT() *MockDVDS_Expecter[T, U] {
	return &MockDVDS_Expecter[T, U]{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDVDS
func (_mock *MockDVDS[T, U]) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDVDS_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDVDS_Close_Call[T any, U any] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDVDS_Expecter[T, U]) Close() *MockDVDS_Close_Call[T, U] {
	return &MockDVDS_Close_Call[T, U]{Call: _e.mock.On("Close")}
}

func (_c *MockDVDS_Close_Call[T, U]) Run(run func()) *MockDVDS_Close_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDVDS_Close_Call[T, U]) Return(err error) *MockDVDS_Close_Call[T, U] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDVDS_Close_Call[T, U]) RunAndReturn(run func() error) *MockDVDS_Close_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockDVDS
func (_mock *MockDVDS[T, U]) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockDVDS_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockDVDS_Done_Call[T any, U any] struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockDVDS_Expecter[T, U]) Done() *MockDVDS_Done_Call[T, U] {
	return &MockDVDS_Done_Call[T, U]{Call: _e.mock.On("Done")}
}

func (_c *MockDVDS_Done_Call[T, U]) Run(run func()) *MockDVDS_Done_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDVDS_Done_Call[T, U]) Return(valCh <-chan struct{}) *MockDVDS_Done_Call[T, U] {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockDVDS_Done_Call[T, U]) RunAndReturn(run func() <-chan struct{}) *MockDVDS_Done_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// Propose provides a mock function for the type MockDVDS
func (_mock *MockDVDS[T, U]) Propose(key string, command types.StateMachineCommand, obj T) error {
	ret := _mock.Called(key, command, obj)

	if len(ret) == 0 {
		panic("no return value specified for Propose")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, types.StateMachineCommand, T) error); ok {
		r0 = returnFunc(key, command, obj)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDVDS_Propose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Propose'
type MockDVDS_Propose_Call[T any, U any] struct {
	*mock.Call
}

// Propose is a helper method to define mock.On call
//   - key string
//   - command types.StateMachineCommand
//   - obj T
func (_e *MockDVDS_Expecter[T, U]) Propose(key interface{}, command interface{}, obj interface{}) *MockDVDS_Propose_Call[T, U] {
	return &MockDVDS_Propose_Call[T, U]{Call: _e.mock.On("Propose", key, command, obj)}
}

func (_c *MockDVDS_Propose_Call[T, U]) Run(run func(key string, command types.StateMachineCommand, obj T)) *MockDVDS_Propose_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 types.StateMachineCommand
		if args[1] != nil {
			arg1 = args[1].(types.StateMachineCommand)
		}
		var arg2 T
		if args[2] != nil {
			arg2 = args[2].(T)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDVDS_Propose_Call[T, U]) Return(err error) *MockDVDS_Propose_Call[T, U] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDVDS_Propose_Call[T, U]) RunAndReturn(run func(key string, command types.StateMachineCommand, obj T) error) *MockDVDS_Propose_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockDVDS
func (_mock *MockDVDS[T, U]) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDVDS_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockDVDS_Run_Call[T any, U any] struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDVDS_Expecter[T, U]) Run(ctx interface{}) *MockDVDS_Run_Call[T, U] {
	return &MockDVDS_Run_Call[T, U]{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockDVDS_Run_Call[T, U]) Run(run func(ctx context.Context)) *MockDVDS_Run_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDVDS_Run_Call[T, U]) Return(err error) *MockDVDS_Run_Call[T, U] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDVDS_Run_Call[T, U]) RunAndReturn(run func(ctx context.Context) error) *MockDVDS_Run_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockDVDS
func (_mock *MockDVDS[T, U]) Watch() (<-chan U, func()) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan U
	var r1 func()
	if returnFunc, ok := ret.Get(0).(func() (<-chan U, func())); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() <-chan U); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan U)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() func()); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}
	return r0, r1
}

// MockDVDS_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockDVDS_Watch_Call[T any, U any] struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
func (_e *MockDVDS_Expecter[T, U]) Watch() *MockDVDS_Watch_Call[T, U] {
	return &MockDVDS_Watch_Call[T, U]{Call: _e.mock.On("Watch")}
}

func (_c *MockDVDS_Watch_Call[T, U]) Run(run func()) *MockDVDS_Watch_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDVDS_Watch_Call[T, U]) Return(vCh <-chan U, fn func()) *MockDVDS_Watch_Call[T, U] {
	_c.Call.Return(vCh, fn)
	return _c
}

func (_c *MockDVDS_Watch_Call[T, U]) RunAndReturn(run func() (<-chan U, func())) *MockDVDS_Watch_Call[T, U] {
	_c.Call.Return(run)
	return _c
}
