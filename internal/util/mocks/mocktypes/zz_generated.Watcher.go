// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * Copyright 2025 Alexandre Mahdhaoui
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mocktypes

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockWatcher creates a new instance of MockWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcher[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcher[T] {
	mock := &MockWatcher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWatcher is an autogenerated mock type for the Watcher type
type MockWatcher[T any] struct {
	mock.Mock
}

type MockWatcher_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockWatcher[T]) EXPECT() *MockWatcher_Expecter[T] {
	return &MockWatcher_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function for the type MockWatcher
func (_mock *MockWatcher[T]) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWatcher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWatcher_Close_Call[T any] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWatcher_Expecter[T]) Close() *MockWatcher_Close_Call[T] {
	return &MockWatcher_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *MockWatcher_Close_Call[T]) Run(run func()) *MockWatcher_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWatcher_Close_Call[T]) Return(err error) *MockWatcher_Close_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWatcher_Close_Call[T]) RunAndReturn(run func() error) *MockWatcher_Close_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockWatcher
func (_mock *MockWatcher[T]) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockWatcher_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockWatcher_Done_Call[T any] struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockWatcher_Expecter[T]) Done() *MockWatcher_Done_Call[T] {
	return &MockWatcher_Done_Call[T]{Call: _e.mock.On("Done")}
}

func (_c *MockWatcher_Done_Call[T]) Run(run func()) *MockWatcher_Done_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWatcher_Done_Call[T]) Return(valCh <-chan struct{}) *MockWatcher_Done_Call[T] {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockWatcher_Done_Call[T]) RunAndReturn(run func() <-chan struct{}) *MockWatcher_Done_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockWatcher
func (_mock *MockWatcher[T]) Watch() (<-chan T, func()) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan T
	var r1 func()
	if returnFunc, ok := ret.Get(0).(func() (<-chan T, func())); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() <-chan T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() func()); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}
	return r0, r1
}

// MockWatcher_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockWatcher_Watch_Call[T any] struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
func (_e *MockWatcher_Expecter[T]) Watch() *MockWatcher_Watch_Call[T] {
	return &MockWatcher_Watch_Call[T]{Call: _e.mock.On("Watch")}
}

func (_c *MockWatcher_Watch_Call[T]) Run(run func()) *MockWatcher_Watch_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWatcher_Watch_Call[T]) Return(vCh <-chan T, fn func()) *MockWatcher_Watch_Call[T] {
	_c.Call.Return(vCh, fn)
	return _c
}

func (_c *MockWatcher_Watch_Call[T]) RunAndReturn(run func() (<-chan T, func())) *MockWatcher_Watch_Call[T] {
	_c.Call.Return(run)
	return _c
}
