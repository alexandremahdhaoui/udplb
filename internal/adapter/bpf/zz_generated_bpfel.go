// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package bpfadapter

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type udplbBackendSpecT struct {
	Id   [16]byte /* uint128 */
	Ip   uint32
	Port uint16
	Mac  [6]uint8
	_    [4]byte
}

type udplbConfigT struct {
	Ip              uint32
	Port            uint16
	_               [2]byte
	LookupTableSize uint32
}

type udplbSessionAssignmentT struct {
	SessionId [16]byte /* uint128 */
	BackendId [16]byte /* uint128 */
}

// loadUdplb returns the embedded CollectionSpec for udplb.
func loadUdplb() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UdplbBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load udplb: %w", err)
	}

	return spec, err
}

// loadUdplbObjects loads udplb and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*udplbObjects
//	*udplbPrograms
//	*udplbMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadUdplbObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadUdplb()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// udplbSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type udplbSpecs struct {
	udplbProgramSpecs
	udplbMapSpecs
	udplbVariableSpecs
}

// udplbProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type udplbProgramSpecs struct {
	Udplb *ebpf.ProgramSpec `ebpf:"udplb"`
}

// udplbMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type udplbMapSpecs struct {
	BackendsA    *ebpf.MapSpec `ebpf:"backends_a"`
	BackendsB    *ebpf.MapSpec `ebpf:"backends_b"`
	LookupTableA *ebpf.MapSpec `ebpf:"lookup_table_a"`
	LookupTableB *ebpf.MapSpec `ebpf:"lookup_table_b"`
	SessionsA    *ebpf.MapSpec `ebpf:"sessions_a"`
	SessionsB    *ebpf.MapSpec `ebpf:"sessions_b"`
	SessionsFifo *ebpf.MapSpec `ebpf:"sessions_fifo"`
}

// udplbVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type udplbVariableSpecs struct {
	ActivePointer    *ebpf.VariableSpec `ebpf:"active_pointer"`
	BackendsA_len    *ebpf.VariableSpec `ebpf:"backends_a_len"`
	BackendsB_len    *ebpf.VariableSpec `ebpf:"backends_b_len"`
	Config           *ebpf.VariableSpec `ebpf:"config"`
	LookupTableA_len *ebpf.VariableSpec `ebpf:"lookup_table_a_len"`
	LookupTableB_len *ebpf.VariableSpec `ebpf:"lookup_table_b_len"`
	SessionsA_len    *ebpf.VariableSpec `ebpf:"sessions_a_len"`
	SessionsB_len    *ebpf.VariableSpec `ebpf:"sessions_b_len"`
}

// udplbObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadUdplbObjects or ebpf.CollectionSpec.LoadAndAssign.
type udplbObjects struct {
	udplbPrograms
	udplbMaps
	udplbVariables
}

func (o *udplbObjects) Close() error {
	return _UdplbClose(
		&o.udplbPrograms,
		&o.udplbMaps,
	)
}

// udplbMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadUdplbObjects or ebpf.CollectionSpec.LoadAndAssign.
type udplbMaps struct {
	BackendsA    *ebpf.Map `ebpf:"backends_a"`
	BackendsB    *ebpf.Map `ebpf:"backends_b"`
	LookupTableA *ebpf.Map `ebpf:"lookup_table_a"`
	LookupTableB *ebpf.Map `ebpf:"lookup_table_b"`
	SessionsA    *ebpf.Map `ebpf:"sessions_a"`
	SessionsB    *ebpf.Map `ebpf:"sessions_b"`
	SessionsFifo *ebpf.Map `ebpf:"sessions_fifo"`
}

func (m *udplbMaps) Close() error {
	return _UdplbClose(
		m.BackendsA,
		m.BackendsB,
		m.LookupTableA,
		m.LookupTableB,
		m.SessionsA,
		m.SessionsB,
		m.SessionsFifo,
	)
}

// udplbVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadUdplbObjects or ebpf.CollectionSpec.LoadAndAssign.
type udplbVariables struct {
	ActivePointer    *ebpf.Variable `ebpf:"active_pointer"`
	BackendsA_len    *ebpf.Variable `ebpf:"backends_a_len"`
	BackendsB_len    *ebpf.Variable `ebpf:"backends_b_len"`
	Config           *ebpf.Variable `ebpf:"config"`
	LookupTableA_len *ebpf.Variable `ebpf:"lookup_table_a_len"`
	LookupTableB_len *ebpf.Variable `ebpf:"lookup_table_b_len"`
	SessionsA_len    *ebpf.Variable `ebpf:"sessions_a_len"`
	SessionsB_len    *ebpf.Variable `ebpf:"sessions_b_len"`
}

// udplbPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadUdplbObjects or ebpf.CollectionSpec.LoadAndAssign.
type udplbPrograms struct {
	Udplb *ebpf.Program `ebpf:"udplb"`
}

func (p *udplbPrograms) Close() error {
	return _UdplbClose(
		p.Udplb,
	)
}

func _UdplbClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed zz_generated_bpfel.o
var _UdplbBytes []byte
